import java.util.concurrent.ConcurrentHashMap

class CacheSimple<Clave, Valor> {
    // `almacenamientoCache` es un mapa donde guardamos los datos en memoria.
    // Usamos `ConcurrentHashMap` porque es seguro para ser accedido por múltiples hilos
    // al mismo tiempo sin causar problemas (aunque este ejemplo `main` no es concurrente).
    private val almacenamientoCache = ConcurrentHashMap<Clave, Valor>()

    /**
     * Intenta obtener un valor de la caché para la clave dada.
     * Si el valor no está en la caché, llama a la función `obtenerValor` para buscarlo,
     * guarda el resultado en la caché y luego lo devuelve.
     *
     * @param clave La clave del valor que se desea obtener.
     * @param obtenerValor Una función lambda (sin parámetros) que se llama para obtener el valor
     * si no está presente en la caché. Esta función debería realizar la
     * operación "costosa" para obtener el dato.
     * @return El valor asociado a la clave, ya sea recuperado de la caché o recién obtenido.
     */
    fun obtener(clave: Clave, obtenerValor: () -> Valor): Valor {
        // `getOrPut` es una función conveniente de los mapas de Kotlin.
        // Intenta obtener el valor para la clave. Si no existe, ejecuta la función lambda
        // proporcionada, guarda el resultado en el mapa bajo esa clave y devuelve el resultado.
        return almacenamientoCache.getOrPut(clave) {
            println("Obteniendo valor para la clave: $clave")
            // Aquí llamamos a la función `obtenerValor` para obtener el dato real
            obtenerValor()
        }
    }

    /**
     * Remueve la entrada asociada a la clave dada de la caché.
     * Esto forzará a que el valor se vuelva a obtener la próxima vez que se solicite.
     *
     * @param clave La clave de la entrada que se desea invalidar (remover).
     */
    fun invalidar(clave: Clave) {
        almacenamientoCache.remove(clave)
        println("Clave invalidada: $clave")
    }
}

fun main() {
    // Creamos una instancia de nuestra `CacheSimple` que almacenará Strings como claves y valores.
    val miCache = CacheSimple<String, String>()

    /**
     * Simula una función que va a buscar datos a una fuente (por ejemplo, una base de datos).
     * Esta función tarda un poco en ejecutarse (simulado con `Thread.sleep`).
     *
     * @param clave La clave de los datos que se quieren obtener.
     * @return Los datos asociados a la clave.
     */
    fun obtenerDatos(clave: String): String {
        println("Intentando obtener datos reales para la clave: $clave...")
        // Simula una operación que consume tiempo
        Thread.sleep(500)
        return "Datos para $clave desde la fuente"
    }

    println("Primera solicitud para 'elemento1': ${miCache.obtener("elemento1") { obtenerDatos("elemento1") }}")
    // La primera vez, "elemento1" no está en la caché, así que se llama a `obtenerDatos`.

    println("Segunda solicitud para 'elemento1': ${miCache.obtener("elemento1") { obtenerDatos("elemento1") }}")
    // La segunda vez, "elemento1" ya está en la caché, así que se devuelve directamente
    // sin llamar a `obtenerDatos` de nuevo.

    println("Primera solicitud para 'elemento2': ${miCache.obtener("elemento2") { obtenerDatos("elemento2") }}")
    // "elemento2" no está en la caché, así que se llama a `obtenerDatos`.

    miCache.invalidar("elemento1")
    // Removemos "elemento1" de la caché.

    println("Tercera solicitud para 'elemento1' después de invalidar: ${miCache.obtener("elemento1") { obtenerDatos("elemento1") }}")
    // Como "elemento1" fue invalidado, no está en la caché, y `obtenerDatos` se llama de nuevo.
}
